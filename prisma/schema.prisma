// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The `datasource` block is used to specify the connection to your DB.
// Set the `provider` field to match your DB type: "postgresql", "mysql" or "sqlite".
// The `url` field must contain the connection string to your DB.
// Learn more about connection strings for your DB: https://pris.ly/connection-strings
// datasource sqlite {
//   provider = "sqlite"
//   url      = "sqlite:./sqlite.db"
// }

datasource onepace {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Other examples for connection strings are:
// SQLite: url = "sqlite:./dev.db"
// MySQL:  url = "mysql://johndoe:johndoe@localhost:3306/mydb"
// You can also use environment variables to specify the connection string: https://pris.ly/prisma-schema#using-environment-variables

// By adding the `generator` block, you specify that you want to generate Prisma's DB client.
// The client is generated by runnning the `prisma generate` command and will be located in `node_modules/@prisma` and can be imported in your code as:
// import { Prisma Client } from '@prisma/client'
generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

// Next steps:
// 1. Add your DB connection string as the `url` of the `datasource` block
// 2. Run `prisma2 introspect` to get your data model into the schema (this will override this file and delete all comments!)
// 3. Run `prisma2 generate` to generate Prisma Client JS
// 4. Start using Prisma Client JS in your application

model Arc {
  id              String     @default(cuid()) @id
  episodes        Episode[]
  title           String     @unique
  description     String
  manga_chapters  String
  anime_episodes  String
  torrent_hash    String
  resolution      String
  images          Image[]
  is_completed    Boolean
  is_hidden       Boolean
  is_released     Boolean
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
}

model Episode {
  id              String    @default(cuid()) @id
  arc             Arc       @relation(fields: [arc_id], references: [id])
  arc_id          String
  title           String    @unique

  // Has to be modified to be greater than VarChar(191), i.e VarChar(1000)
  description     String
  part            Int
  manga_chapters  String
  anime_episodes  String
  crc32           String
  torrent_hash    String
  streams_hash    String?
  resolution      String
  images          Image[]
  released_date   String
  status          String
  openload        String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model Image {
  id          String    @default(cuid()) @id
  arc         Arc?      @relation(fields: [arc_id], references: [id])
  arc_id      String?
  alt         String?
  episode     Episode?  @relation(fields: [episode_id], references: [id])
  episode_id  String?
  src         String    @unique
  type        String
  width       Int
}

model User {
  id          String        @default(cuid()) @id
  email       String        @unique
  password    String
  profile     UserProfile?
  role        UserRole      @default(USER)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model UserProfile {
  id           String     @default(cuid()) @id
  user         User?      @relation(fields: [user_id], references: [id])
  user_id      String?
  name         String
  country      String?
  picture      String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

enum UserRole {
  USER
  ADMIN
}
